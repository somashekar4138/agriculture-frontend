/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateNotificationDto,
	NotificationsControllerCreate200,
	NotificationsControllerFindAll200,
	NotificationsControllerFindAllParams,
	SuccessResponseDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const notificationsControllerCreate = (createNotificationDto: CreateNotificationDto) => {
	return authInstance<NotificationsControllerCreate200 | void>({
		url: `/api/notifications`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createNotificationDto,
	});
};

export const getNotificationsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof notificationsControllerCreate>>,
		TError,
		{ data: CreateNotificationDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof notificationsControllerCreate>>,
	TError,
	{ data: CreateNotificationDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof notificationsControllerCreate>>,
		{ data: CreateNotificationDto }
	> = (props) => {
		const { data } = props ?? {};

		return notificationsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type NotificationsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof notificationsControllerCreate>>
>;
export type NotificationsControllerCreateMutationBody = CreateNotificationDto;
export type NotificationsControllerCreateMutationError = ErrorType<unknown>;

export const useNotificationsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof notificationsControllerCreate>>,
		TError,
		{ data: CreateNotificationDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof notificationsControllerCreate>>,
	TError,
	{ data: CreateNotificationDto },
	TContext
> => {
	const mutationOptions = getNotificationsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const notificationsControllerFindAll = (
	params: NotificationsControllerFindAllParams,
	signal?: AbortSignal,
) => {
	return authInstance<NotificationsControllerFindAll200>({
		url: `/api/notifications/all`,
		method: "GET",
		params,
		signal,
	});
};

export const getNotificationsControllerFindAllQueryKey = (
	params: NotificationsControllerFindAllParams,
) => {
	return [`/api/notifications/all`, ...(params ? [params] : [])] as const;
};

export const getNotificationsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof notificationsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params: NotificationsControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof notificationsControllerFindAll>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getNotificationsControllerFindAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof notificationsControllerFindAll>>> = ({
		signal,
	}) => notificationsControllerFindAll(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof notificationsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type NotificationsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof notificationsControllerFindAll>>
>;
export type NotificationsControllerFindAllQueryError = ErrorType<unknown>;

export const useNotificationsControllerFindAll = <
	TData = Awaited<ReturnType<typeof notificationsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params: NotificationsControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof notificationsControllerFindAll>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getNotificationsControllerFindAllQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const notificationsControllerMarkAsRead = () => {
	return authInstance<SuccessResponseDto | void>({
		url: `/api/notifications/mark-as-read`,
		method: "POST",
	});
};

export const getNotificationsControllerMarkAsReadMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>,
		TError,
		void,
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>,
	TError,
	void,
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>,
		void
	> = () => {
		return notificationsControllerMarkAsRead();
	};

	return { mutationFn, ...mutationOptions };
};

export type NotificationsControllerMarkAsReadMutationResult = NonNullable<
	Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>
>;

export type NotificationsControllerMarkAsReadMutationError = ErrorType<unknown>;

export const useNotificationsControllerMarkAsRead = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>,
		TError,
		void,
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof notificationsControllerMarkAsRead>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getNotificationsControllerMarkAsReadMutationOptions(options);

	return useMutation(mutationOptions);
};
