/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreatePaymentDetailsDto,
	PaymentDetailsDto,
	PaymentdetailsControllerCreate201,
	PaymentdetailsControllerUpdate201,
	SuccessResponseDto,
	UpdatePaymentDetailsDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const paymentdetailsControllerCreate = (
	createPaymentDetailsDto: CreatePaymentDetailsDto,
) => {
	return authInstance<PaymentdetailsControllerCreate201>({
		url: `/api/paymentdetails`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createPaymentDetailsDto,
	});
};

export const getPaymentdetailsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerCreate>>,
		TError,
		{ data: CreatePaymentDetailsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentdetailsControllerCreate>>,
	TError,
	{ data: CreatePaymentDetailsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentdetailsControllerCreate>>,
		{ data: CreatePaymentDetailsDto }
	> = (props) => {
		const { data } = props ?? {};

		return paymentdetailsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentdetailsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentdetailsControllerCreate>>
>;
export type PaymentdetailsControllerCreateMutationBody = CreatePaymentDetailsDto;
export type PaymentdetailsControllerCreateMutationError = ErrorType<unknown>;

export const usePaymentdetailsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerCreate>>,
		TError,
		{ data: CreatePaymentDetailsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentdetailsControllerCreate>>,
	TError,
	{ data: CreatePaymentDetailsDto },
	TContext
> => {
	const mutationOptions = getPaymentdetailsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentdetailsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<PaymentDetailsDto[]>({ url: `/api/paymentdetails`, method: "GET", signal });
};

export const getPaymentdetailsControllerFindAllQueryKey = () => {
	return [`/api/paymentdetails`] as const;
};

export const getPaymentdetailsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentdetailsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>> = ({
		signal,
	}) => paymentdetailsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentdetailsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>
>;
export type PaymentdetailsControllerFindAllQueryError = ErrorType<unknown>;

export const usePaymentdetailsControllerFindAll = <
	TData = Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentdetailsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentdetailsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentdetailsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<PaymentDetailsDto>({
		url: `/api/paymentdetails/${id}`,
		method: "GET",
		signal,
	});
};

export const getPaymentdetailsControllerFindOneQueryKey = (id: string) => {
	return [`/api/paymentdetails/${id}`] as const;
};

export const getPaymentdetailsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentdetailsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>> = ({
		signal,
	}) => paymentdetailsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentdetailsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>
>;
export type PaymentdetailsControllerFindOneQueryError = ErrorType<unknown>;

export const usePaymentdetailsControllerFindOne = <
	TData = Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentdetailsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentdetailsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentdetailsControllerUpdate = (
	id: string,
	updatePaymentDetailsDto: UpdatePaymentDetailsDto,
) => {
	return authInstance<void | PaymentdetailsControllerUpdate201>({
		url: `/api/paymentdetails/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updatePaymentDetailsDto,
	});
};

export const getPaymentdetailsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePaymentDetailsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePaymentDetailsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>,
		{ id: string; data: UpdatePaymentDetailsDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return paymentdetailsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentdetailsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>
>;
export type PaymentdetailsControllerUpdateMutationBody = UpdatePaymentDetailsDto;
export type PaymentdetailsControllerUpdateMutationError = ErrorType<unknown>;

export const usePaymentdetailsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePaymentDetailsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentdetailsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePaymentDetailsDto },
	TContext
> => {
	const mutationOptions = getPaymentdetailsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentdetailsControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/paymentdetails/${id}`, method: "DELETE" });
};

export const getPaymentdetailsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentdetailsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentdetailsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return paymentdetailsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentdetailsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentdetailsControllerRemove>>
>;

export type PaymentdetailsControllerRemoveMutationError = ErrorType<unknown>;

export const usePaymentdetailsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentdetailsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentdetailsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getPaymentdetailsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
