/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateInvoiceTemplateDto,
	InvoiceTemplateDto,
	InvoicetemplateControllerCreate201,
	UpdateInvoiceTemplateDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const invoicetemplateControllerCreate = (
	createInvoiceTemplateDto: CreateInvoiceTemplateDto,
) => {
	return authInstance<InvoicetemplateControllerCreate201>({
		url: `/api/invoicetemplate`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createInvoiceTemplateDto,
	});
};

export const getInvoicetemplateControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerCreate>>,
		TError,
		{ data: CreateInvoiceTemplateDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicetemplateControllerCreate>>,
	TError,
	{ data: CreateInvoiceTemplateDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicetemplateControllerCreate>>,
		{ data: CreateInvoiceTemplateDto }
	> = (props) => {
		const { data } = props ?? {};

		return invoicetemplateControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicetemplateControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicetemplateControllerCreate>>
>;
export type InvoicetemplateControllerCreateMutationBody = CreateInvoiceTemplateDto;
export type InvoicetemplateControllerCreateMutationError = ErrorType<unknown>;

export const useInvoicetemplateControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerCreate>>,
		TError,
		{ data: CreateInvoiceTemplateDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicetemplateControllerCreate>>,
	TError,
	{ data: CreateInvoiceTemplateDto },
	TContext
> => {
	const mutationOptions = getInvoicetemplateControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const invoicetemplateControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<InvoiceTemplateDto[]>({ url: `/api/invoicetemplate`, method: "GET", signal });
};

export const getInvoicetemplateControllerFindAllQueryKey = () => {
	return [`/api/invoicetemplate`] as const;
};

export const getInvoicetemplateControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInvoicetemplateControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>> = ({
		signal,
	}) => invoicetemplateControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InvoicetemplateControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>
>;
export type InvoicetemplateControllerFindAllQueryError = ErrorType<unknown>;

export const useInvoicetemplateControllerFindAll = <
	TData = Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicetemplateControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInvoicetemplateControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const invoicetemplateControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<InvoiceTemplateDto>({
		url: `/api/invoicetemplate/${id}`,
		method: "GET",
		signal,
	});
};

export const getInvoicetemplateControllerFindOneQueryKey = (id: string) => {
	return [`/api/invoicetemplate/${id}`] as const;
};

export const getInvoicetemplateControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInvoicetemplateControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>> = ({
		signal,
	}) => invoicetemplateControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InvoicetemplateControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>
>;
export type InvoicetemplateControllerFindOneQueryError = ErrorType<unknown>;

export const useInvoicetemplateControllerFindOne = <
	TData = Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof invoicetemplateControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInvoicetemplateControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const invoicetemplateControllerUpdate = (
	id: string,
	updateInvoiceTemplateDto: UpdateInvoiceTemplateDto,
) => {
	return authInstance<InvoiceTemplateDto>({
		url: `/api/invoicetemplate/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateInvoiceTemplateDto,
	});
};

export const getInvoicetemplateControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInvoiceTemplateDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>,
	TError,
	{ id: string; data: UpdateInvoiceTemplateDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>,
		{ id: string; data: UpdateInvoiceTemplateDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return invoicetemplateControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicetemplateControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>
>;
export type InvoicetemplateControllerUpdateMutationBody = UpdateInvoiceTemplateDto;
export type InvoicetemplateControllerUpdateMutationError = ErrorType<unknown>;

export const useInvoicetemplateControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInvoiceTemplateDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicetemplateControllerUpdate>>,
	TError,
	{ id: string; data: UpdateInvoiceTemplateDto },
	TContext
> => {
	const mutationOptions = getInvoicetemplateControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const invoicetemplateControllerRemove = (id: string) => {
	return authInstance<void>({ url: `/api/invoicetemplate/${id}`, method: "DELETE" });
};

export const getInvoicetemplateControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicetemplateControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicetemplateControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return invoicetemplateControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicetemplateControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicetemplateControllerRemove>>
>;

export type InvoicetemplateControllerRemoveMutationError = ErrorType<unknown>;

export const useInvoicetemplateControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicetemplateControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicetemplateControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getInvoicetemplateControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
