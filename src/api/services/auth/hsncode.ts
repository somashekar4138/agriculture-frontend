/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateHSNCodeTaxDto,
	HSNCodeDto,
	HsncodeControllerCreate201,
	HsncodeControllerUpdate201,
	SuccessResponseDto,
	UpdateHSNCodeDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const hsncodeControllerCreate = (createHSNCodeTaxDto: CreateHSNCodeTaxDto) => {
	return authInstance<HsncodeControllerCreate201>({
		url: `/api/hsncode`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createHSNCodeTaxDto,
	});
};

export const getHsncodeControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerCreate>>,
		TError,
		{ data: CreateHSNCodeTaxDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof hsncodeControllerCreate>>,
	TError,
	{ data: CreateHSNCodeTaxDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof hsncodeControllerCreate>>,
		{ data: CreateHSNCodeTaxDto }
	> = (props) => {
		const { data } = props ?? {};

		return hsncodeControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type HsncodeControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof hsncodeControllerCreate>>
>;
export type HsncodeControllerCreateMutationBody = CreateHSNCodeTaxDto;
export type HsncodeControllerCreateMutationError = ErrorType<unknown>;

export const useHsncodeControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerCreate>>,
		TError,
		{ data: CreateHSNCodeTaxDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof hsncodeControllerCreate>>,
	TError,
	{ data: CreateHSNCodeTaxDto },
	TContext
> => {
	const mutationOptions = getHsncodeControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const hsncodeControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<HSNCodeDto[]>({ url: `/api/hsncode`, method: "GET", signal });
};

export const getHsncodeControllerFindAllQueryKey = () => {
	return [`/api/hsncode`] as const;
};

export const getHsncodeControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof hsncodeControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof hsncodeControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getHsncodeControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof hsncodeControllerFindAll>>> = ({
		signal,
	}) => hsncodeControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof hsncodeControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type HsncodeControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof hsncodeControllerFindAll>>
>;
export type HsncodeControllerFindAllQueryError = ErrorType<unknown>;

export const useHsncodeControllerFindAll = <
	TData = Awaited<ReturnType<typeof hsncodeControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof hsncodeControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getHsncodeControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const hsncodeControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<HSNCodeDto>({ url: `/api/hsncode/${id}`, method: "GET", signal });
};

export const getHsncodeControllerFindOneQueryKey = (id: string) => {
	return [`/api/hsncode/${id}`] as const;
};

export const getHsncodeControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof hsncodeControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof hsncodeControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getHsncodeControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof hsncodeControllerFindOne>>> = ({
		signal,
	}) => hsncodeControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof hsncodeControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type HsncodeControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof hsncodeControllerFindOne>>
>;
export type HsncodeControllerFindOneQueryError = ErrorType<unknown>;

export const useHsncodeControllerFindOne = <
	TData = Awaited<ReturnType<typeof hsncodeControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof hsncodeControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getHsncodeControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const hsncodeControllerUpdate = (id: string, updateHSNCodeDto: UpdateHSNCodeDto) => {
	return authInstance<void | HsncodeControllerUpdate201>({
		url: `/api/hsncode/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateHSNCodeDto,
	});
};

export const getHsncodeControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerUpdate>>,
		TError,
		{ id: string; data: UpdateHSNCodeDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof hsncodeControllerUpdate>>,
	TError,
	{ id: string; data: UpdateHSNCodeDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof hsncodeControllerUpdate>>,
		{ id: string; data: UpdateHSNCodeDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return hsncodeControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type HsncodeControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof hsncodeControllerUpdate>>
>;
export type HsncodeControllerUpdateMutationBody = UpdateHSNCodeDto;
export type HsncodeControllerUpdateMutationError = ErrorType<unknown>;

export const useHsncodeControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerUpdate>>,
		TError,
		{ id: string; data: UpdateHSNCodeDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof hsncodeControllerUpdate>>,
	TError,
	{ id: string; data: UpdateHSNCodeDto },
	TContext
> => {
	const mutationOptions = getHsncodeControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const hsncodeControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/hsncode/${id}`, method: "DELETE" });
};

export const getHsncodeControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof hsncodeControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof hsncodeControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return hsncodeControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type HsncodeControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof hsncodeControllerRemove>>
>;

export type HsncodeControllerRemoveMutationError = ErrorType<unknown>;

export const useHsncodeControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof hsncodeControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof hsncodeControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getHsncodeControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
