/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	AIDashboardDto,
	CreateAIDashboardDto,
	DashboardsControllerCreate200,
	DashboardsControllerUpdate200,
	UpdateAIDashboardDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const dashboardsControllerCreate = (createAIDashboardDto: CreateAIDashboardDto) => {
	return authInstance<DashboardsControllerCreate200 | void>({
		url: `/api/dashboards`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createAIDashboardDto,
	});
};

export const getDashboardsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerCreate>>,
		TError,
		{ data: CreateAIDashboardDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof dashboardsControllerCreate>>,
	TError,
	{ data: CreateAIDashboardDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof dashboardsControllerCreate>>,
		{ data: CreateAIDashboardDto }
	> = (props) => {
		const { data } = props ?? {};

		return dashboardsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type DashboardsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof dashboardsControllerCreate>>
>;
export type DashboardsControllerCreateMutationBody = CreateAIDashboardDto;
export type DashboardsControllerCreateMutationError = ErrorType<unknown>;

export const useDashboardsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerCreate>>,
		TError,
		{ data: CreateAIDashboardDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof dashboardsControllerCreate>>,
	TError,
	{ data: CreateAIDashboardDto },
	TContext
> => {
	const mutationOptions = getDashboardsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const dashboardsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<AIDashboardDto[]>({ url: `/api/dashboards`, method: "GET", signal });
};

export const getDashboardsControllerFindAllQueryKey = () => {
	return [`/api/dashboards`] as const;
};

export const getDashboardsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof dashboardsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof dashboardsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDashboardsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsControllerFindAll>>> = ({
		signal,
	}) => dashboardsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof dashboardsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type DashboardsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof dashboardsControllerFindAll>>
>;
export type DashboardsControllerFindAllQueryError = ErrorType<unknown>;

export const useDashboardsControllerFindAll = <
	TData = Awaited<ReturnType<typeof dashboardsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof dashboardsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getDashboardsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const dashboardsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<AIDashboardDto>({ url: `/api/dashboards/${id}`, method: "GET", signal });
};

export const getDashboardsControllerFindOneQueryKey = (id: string) => {
	return [`/api/dashboards/${id}`] as const;
};

export const getDashboardsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof dashboardsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof dashboardsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDashboardsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsControllerFindOne>>> = ({
		signal,
	}) => dashboardsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof dashboardsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type DashboardsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof dashboardsControllerFindOne>>
>;
export type DashboardsControllerFindOneQueryError = ErrorType<unknown>;

export const useDashboardsControllerFindOne = <
	TData = Awaited<ReturnType<typeof dashboardsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof dashboardsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getDashboardsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const dashboardsControllerUpdate = (
	id: string,
	updateAIDashboardDto: UpdateAIDashboardDto,
) => {
	return authInstance<DashboardsControllerUpdate200>({
		url: `/api/dashboards/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateAIDashboardDto,
	});
};

export const getDashboardsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateAIDashboardDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof dashboardsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateAIDashboardDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof dashboardsControllerUpdate>>,
		{ id: string; data: UpdateAIDashboardDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return dashboardsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type DashboardsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof dashboardsControllerUpdate>>
>;
export type DashboardsControllerUpdateMutationBody = UpdateAIDashboardDto;
export type DashboardsControllerUpdateMutationError = ErrorType<unknown>;

export const useDashboardsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateAIDashboardDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof dashboardsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateAIDashboardDto },
	TContext
> => {
	const mutationOptions = getDashboardsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const dashboardsControllerRemove = (id: string) => {
	return authInstance<void>({ url: `/api/dashboards/${id}`, method: "DELETE" });
};

export const getDashboardsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof dashboardsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof dashboardsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return dashboardsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type DashboardsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof dashboardsControllerRemove>>
>;

export type DashboardsControllerRemoveMutationError = ErrorType<unknown>;

export const useDashboardsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof dashboardsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof dashboardsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDashboardsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
