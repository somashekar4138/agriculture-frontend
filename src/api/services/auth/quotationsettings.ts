/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateQuotationSettingsDto,
	QuotationSettingsDto,
	QuotationsettingsControllerCreate201,
	QuotationsettingsControllerUpdate200,
	SuccessResponseDto,
	UpdateQuotationSettingsDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const quotationsettingsControllerCreate = (
	createQuotationSettingsDto: CreateQuotationSettingsDto,
) => {
	return authInstance<QuotationsettingsControllerCreate201>({
		url: `/api/quotationsettings`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createQuotationSettingsDto,
	});
};

export const getQuotationsettingsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerCreate>>,
		TError,
		{ data: CreateQuotationSettingsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationsettingsControllerCreate>>,
	TError,
	{ data: CreateQuotationSettingsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationsettingsControllerCreate>>,
		{ data: CreateQuotationSettingsDto }
	> = (props) => {
		const { data } = props ?? {};

		return quotationsettingsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationsettingsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerCreate>>
>;
export type QuotationsettingsControllerCreateMutationBody = CreateQuotationSettingsDto;
export type QuotationsettingsControllerCreateMutationError = ErrorType<unknown>;

export const useQuotationsettingsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerCreate>>,
		TError,
		{ data: CreateQuotationSettingsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationsettingsControllerCreate>>,
	TError,
	{ data: CreateQuotationSettingsDto },
	TContext
> => {
	const mutationOptions = getQuotationsettingsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationsettingsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<QuotationSettingsDto[]>({
		url: `/api/quotationsettings`,
		method: "GET",
		signal,
	});
};

export const getQuotationsettingsControllerFindAllQueryKey = () => {
	return [`/api/quotationsettings`] as const;
};

export const getQuotationsettingsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationsettingsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>> = ({
		signal,
	}) => quotationsettingsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationsettingsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>
>;
export type QuotationsettingsControllerFindAllQueryError = ErrorType<unknown>;

export const useQuotationsettingsControllerFindAll = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationsettingsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationsettingsControllerFindFirst = (signal?: AbortSignal) => {
	return authInstance<QuotationSettingsDto>({
		url: `/api/quotationsettings/first`,
		method: "GET",
		signal,
	});
};

export const getQuotationsettingsControllerFindFirstQueryKey = () => {
	return [`/api/quotationsettings/first`] as const;
};

export const getQuotationsettingsControllerFindFirstQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationsettingsControllerFindFirstQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>
	> = ({ signal }) => quotationsettingsControllerFindFirst(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationsettingsControllerFindFirstQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>
>;
export type QuotationsettingsControllerFindFirstQueryError = ErrorType<unknown>;

export const useQuotationsettingsControllerFindFirst = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindFirst>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationsettingsControllerFindFirstQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationsettingsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<QuotationSettingsDto>({
		url: `/api/quotationsettings/${id}`,
		method: "GET",
		signal,
	});
};

export const getQuotationsettingsControllerFindOneQueryKey = (id: string) => {
	return [`/api/quotationsettings/${id}`] as const;
};

export const getQuotationsettingsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationsettingsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>> = ({
		signal,
	}) => quotationsettingsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationsettingsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>
>;
export type QuotationsettingsControllerFindOneQueryError = ErrorType<unknown>;

export const useQuotationsettingsControllerFindOne = <
	TData = Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationsettingsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationsettingsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationsettingsControllerUpdate = (
	id: string,
	updateQuotationSettingsDto: UpdateQuotationSettingsDto,
) => {
	return authInstance<QuotationsettingsControllerUpdate200>({
		url: `/api/quotationsettings/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateQuotationSettingsDto,
	});
};

export const getQuotationsettingsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationSettingsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationSettingsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>,
		{ id: string; data: UpdateQuotationSettingsDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return quotationsettingsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationsettingsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>
>;
export type QuotationsettingsControllerUpdateMutationBody = UpdateQuotationSettingsDto;
export type QuotationsettingsControllerUpdateMutationError = ErrorType<unknown>;

export const useQuotationsettingsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationSettingsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationsettingsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationSettingsDto },
	TContext
> => {
	const mutationOptions = getQuotationsettingsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationsettingsControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({
		url: `/api/quotationsettings/${id}`,
		method: "DELETE",
	});
};

export const getQuotationsettingsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationsettingsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationsettingsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return quotationsettingsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationsettingsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationsettingsControllerRemove>>
>;

export type QuotationsettingsControllerRemoveMutationError = ErrorType<unknown>;

export const useQuotationsettingsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationsettingsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationsettingsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getQuotationsettingsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
