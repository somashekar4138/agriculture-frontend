/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateTaxDto,
	SuccessResponseDto,
	TaxDto,
	TaxcodeControllerCreate201,
	TaxcodeControllerUpdate201,
	UpdateTaxDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const taxcodeControllerCreate = (createTaxDto: CreateTaxDto) => {
	return authInstance<TaxcodeControllerCreate201>({
		url: `/api/taxcode`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createTaxDto,
	});
};

export const getTaxcodeControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerCreate>>,
		TError,
		{ data: CreateTaxDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof taxcodeControllerCreate>>,
	TError,
	{ data: CreateTaxDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof taxcodeControllerCreate>>,
		{ data: CreateTaxDto }
	> = (props) => {
		const { data } = props ?? {};

		return taxcodeControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TaxcodeControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof taxcodeControllerCreate>>
>;
export type TaxcodeControllerCreateMutationBody = CreateTaxDto;
export type TaxcodeControllerCreateMutationError = ErrorType<unknown>;

export const useTaxcodeControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerCreate>>,
		TError,
		{ data: CreateTaxDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof taxcodeControllerCreate>>,
	TError,
	{ data: CreateTaxDto },
	TContext
> => {
	const mutationOptions = getTaxcodeControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const taxcodeControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<TaxDto[]>({ url: `/api/taxcode`, method: "GET", signal });
};

export const getTaxcodeControllerFindAllQueryKey = () => {
	return [`/api/taxcode`] as const;
};

export const getTaxcodeControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof taxcodeControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof taxcodeControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTaxcodeControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof taxcodeControllerFindAll>>> = ({
		signal,
	}) => taxcodeControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof taxcodeControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TaxcodeControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof taxcodeControllerFindAll>>
>;
export type TaxcodeControllerFindAllQueryError = ErrorType<unknown>;

export const useTaxcodeControllerFindAll = <
	TData = Awaited<ReturnType<typeof taxcodeControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof taxcodeControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getTaxcodeControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const taxcodeControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<TaxDto>({ url: `/api/taxcode/${id}`, method: "GET", signal });
};

export const getTaxcodeControllerFindOneQueryKey = (id: string) => {
	return [`/api/taxcode/${id}`] as const;
};

export const getTaxcodeControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof taxcodeControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof taxcodeControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTaxcodeControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof taxcodeControllerFindOne>>> = ({
		signal,
	}) => taxcodeControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof taxcodeControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type TaxcodeControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof taxcodeControllerFindOne>>
>;
export type TaxcodeControllerFindOneQueryError = ErrorType<unknown>;

export const useTaxcodeControllerFindOne = <
	TData = Awaited<ReturnType<typeof taxcodeControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof taxcodeControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getTaxcodeControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const taxcodeControllerUpdate = (id: string, updateTaxDto: UpdateTaxDto) => {
	return authInstance<void | TaxcodeControllerUpdate201>({
		url: `/api/taxcode/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateTaxDto,
	});
};

export const getTaxcodeControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerUpdate>>,
		TError,
		{ id: string; data: UpdateTaxDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof taxcodeControllerUpdate>>,
	TError,
	{ id: string; data: UpdateTaxDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof taxcodeControllerUpdate>>,
		{ id: string; data: UpdateTaxDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return taxcodeControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type TaxcodeControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof taxcodeControllerUpdate>>
>;
export type TaxcodeControllerUpdateMutationBody = UpdateTaxDto;
export type TaxcodeControllerUpdateMutationError = ErrorType<unknown>;

export const useTaxcodeControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerUpdate>>,
		TError,
		{ id: string; data: UpdateTaxDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof taxcodeControllerUpdate>>,
	TError,
	{ id: string; data: UpdateTaxDto },
	TContext
> => {
	const mutationOptions = getTaxcodeControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const taxcodeControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/taxcode/${id}`, method: "DELETE" });
};

export const getTaxcodeControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof taxcodeControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof taxcodeControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return taxcodeControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type TaxcodeControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof taxcodeControllerRemove>>
>;

export type TaxcodeControllerRemoveMutationError = ErrorType<unknown>;

export const useTaxcodeControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof taxcodeControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof taxcodeControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getTaxcodeControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
