/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateQuotationWithProducts,
	Quotation,
	QuotationControllerConvertToInvoice200,
	QuotationControllerConvertToInvoiceParams,
	QuotationControllerCreate201,
	QuotationControllerInvoiceSentToMail200,
	QuotationControllerInvoiceSentToMailParams,
	QuotationControllerMarkedAsAccepted200,
	QuotationControllerMarkedAsAcceptedParams,
	QuotationControllerMarkedAsMailed200,
	QuotationControllerMarkedAsMailedParams,
	QuotationControllerMarkedAsRejected200,
	QuotationControllerMarkedAsRejectedParams,
	QuotationControllerUpdate200,
	QuotationTotalCountDto,
	QuotationWithAllDataDto,
	SendMailDto,
	SuccessResponseDto,
	UpdateQuotationWithProducts,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const quotationControllerCreate = (
	createQuotationWithProducts: CreateQuotationWithProducts,
) => {
	return authInstance<QuotationControllerCreate201>({
		url: `/api/quotation`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createQuotationWithProducts,
	});
};

export const getQuotationControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerCreate>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		{ data: CreateQuotationWithProducts }
	> = (props) => {
		const { data } = props ?? {};

		return quotationControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerCreate>>
>;
export type QuotationControllerCreateMutationBody = CreateQuotationWithProducts;
export type QuotationControllerCreateMutationError = ErrorType<unknown>;

export const useQuotationControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerCreate>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const mutationOptions = getQuotationControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<Quotation[]>({ url: `/api/quotation`, method: "GET", signal });
};

export const getQuotationControllerFindAllQueryKey = () => {
	return [`/api/quotation`] as const;
};

export const getQuotationControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerFindAll>>> = ({
		signal,
	}) => quotationControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerFindAll>>
>;
export type QuotationControllerFindAllQueryError = ErrorType<unknown>;

export const useQuotationControllerFindAll = <
	TData = Awaited<ReturnType<typeof quotationControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerCountTotal = (signal?: AbortSignal) => {
	return authInstance<QuotationTotalCountDto>({
		url: `/api/quotation/countTotal`,
		method: "GET",
		signal,
	});
};

export const getQuotationControllerCountTotalQueryKey = () => {
	return [`/api/quotation/countTotal`] as const;
};

export const getQuotationControllerCountTotalQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerCountTotal>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerCountTotal>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerCountTotalQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerCountTotal>>> = ({
		signal,
	}) => quotationControllerCountTotal(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerCountTotal>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerCountTotalQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerCountTotal>>
>;
export type QuotationControllerCountTotalQueryError = ErrorType<unknown>;

export const useQuotationControllerCountTotal = <
	TData = Awaited<ReturnType<typeof quotationControllerCountTotal>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerCountTotal>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerCountTotalQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<QuotationWithAllDataDto>({
		url: `/api/quotation/${id}`,
		method: "GET",
		signal,
	});
};

export const getQuotationControllerFindOneQueryKey = (id: string) => {
	return [`/api/quotation/${id}`] as const;
};

export const getQuotationControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerFindOne>>> = ({
		signal,
	}) => quotationControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerFindOne>>
>;
export type QuotationControllerFindOneQueryError = ErrorType<unknown>;

export const useQuotationControllerFindOne = <
	TData = Awaited<ReturnType<typeof quotationControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerUpdate = (
	id: string,
	updateQuotationWithProducts: UpdateQuotationWithProducts,
) => {
	return authInstance<QuotationControllerUpdate200>({
		url: `/api/quotation/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateQuotationWithProducts,
	});
};

export const getQuotationControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationWithProducts },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationWithProducts },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		{ id: string; data: UpdateQuotationWithProducts }
	> = (props) => {
		const { id, data } = props ?? {};

		return quotationControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerUpdate>>
>;
export type QuotationControllerUpdateMutationBody = UpdateQuotationWithProducts;
export type QuotationControllerUpdateMutationError = ErrorType<unknown>;

export const useQuotationControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationWithProducts },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationWithProducts },
	TContext
> => {
	const mutationOptions = getQuotationControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/quotation/${id}`, method: "DELETE" });
};

export const getQuotationControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return quotationControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerRemove>>
>;

export type QuotationControllerRemoveMutationError = ErrorType<unknown>;

export const useQuotationControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getQuotationControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerTest = (id: string, signal?: AbortSignal) => {
	return authInstance<string>({ url: `/api/quotation/test/${id}`, method: "GET", signal });
};

export const getQuotationControllerTestQueryKey = (id: string) => {
	return [`/api/quotation/test/${id}`] as const;
};

export const getQuotationControllerTestQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerTest>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerTest>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerTestQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerTest>>> = ({
		signal,
	}) => quotationControllerTest(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerTest>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerTestQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerTest>>
>;
export type QuotationControllerTestQueryError = ErrorType<unknown>;

export const useQuotationControllerTest = <
	TData = Awaited<ReturnType<typeof quotationControllerTest>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerTest>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerTestQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerQuotationPublicFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<QuotationWithAllDataDto>({
		url: `/api/quotation/quotationPublicFindOne/${id}`,
		method: "GET",
		signal,
	});
};

export const getQuotationControllerQuotationPublicFindOneQueryKey = (id: string) => {
	return [`/api/quotation/quotationPublicFindOne/${id}`] as const;
};

export const getQuotationControllerQuotationPublicFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getQuotationControllerQuotationPublicFindOneQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>
	> = ({ signal }) => quotationControllerQuotationPublicFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerQuotationPublicFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>
>;
export type QuotationControllerQuotationPublicFindOneQueryError = ErrorType<unknown>;

export const useQuotationControllerQuotationPublicFindOne = <
	TData = Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof quotationControllerQuotationPublicFindOne>>,
				TError,
				TData
			>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerQuotationPublicFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerInvoiceSentToMail = (
	sendMailDto: SendMailDto,
	params: QuotationControllerInvoiceSentToMailParams,
) => {
	return authInstance<QuotationControllerInvoiceSentToMail200 | void>({
		url: `/api/quotation/quotationSentToMail`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: sendMailDto,
		params,
	});
};

export const getQuotationControllerInvoiceSentToMailMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>,
		TError,
		{ data: SendMailDto; params: QuotationControllerInvoiceSentToMailParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>,
	TError,
	{ data: SendMailDto; params: QuotationControllerInvoiceSentToMailParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>,
		{ data: SendMailDto; params: QuotationControllerInvoiceSentToMailParams }
	> = (props) => {
		const { data, params } = props ?? {};

		return quotationControllerInvoiceSentToMail(data, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerInvoiceSentToMailMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>
>;
export type QuotationControllerInvoiceSentToMailMutationBody = SendMailDto;
export type QuotationControllerInvoiceSentToMailMutationError = ErrorType<unknown>;

export const useQuotationControllerInvoiceSentToMail = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>,
		TError,
		{ data: SendMailDto; params: QuotationControllerInvoiceSentToMailParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerInvoiceSentToMail>>,
	TError,
	{ data: SendMailDto; params: QuotationControllerInvoiceSentToMailParams },
	TContext
> => {
	const mutationOptions = getQuotationControllerInvoiceSentToMailMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerMarkedAsRejected = (
	params: QuotationControllerMarkedAsRejectedParams,
) => {
	return authInstance<QuotationControllerMarkedAsRejected200 | void>({
		url: `/api/quotation/markedAsRejected`,
		method: "POST",
		params,
	});
};

export const getQuotationControllerMarkedAsRejectedMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>,
		TError,
		{ params: QuotationControllerMarkedAsRejectedParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>,
	TError,
	{ params: QuotationControllerMarkedAsRejectedParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>,
		{ params: QuotationControllerMarkedAsRejectedParams }
	> = (props) => {
		const { params } = props ?? {};

		return quotationControllerMarkedAsRejected(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerMarkedAsRejectedMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>
>;

export type QuotationControllerMarkedAsRejectedMutationError = ErrorType<unknown>;

export const useQuotationControllerMarkedAsRejected = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>,
		TError,
		{ params: QuotationControllerMarkedAsRejectedParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerMarkedAsRejected>>,
	TError,
	{ params: QuotationControllerMarkedAsRejectedParams },
	TContext
> => {
	const mutationOptions = getQuotationControllerMarkedAsRejectedMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerMarkedAsAccepted = (
	params: QuotationControllerMarkedAsAcceptedParams,
) => {
	return authInstance<QuotationControllerMarkedAsAccepted200 | void>({
		url: `/api/quotation/markedAsAccepted`,
		method: "POST",
		params,
	});
};

export const getQuotationControllerMarkedAsAcceptedMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>,
		TError,
		{ params: QuotationControllerMarkedAsAcceptedParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>,
	TError,
	{ params: QuotationControllerMarkedAsAcceptedParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>,
		{ params: QuotationControllerMarkedAsAcceptedParams }
	> = (props) => {
		const { params } = props ?? {};

		return quotationControllerMarkedAsAccepted(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerMarkedAsAcceptedMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>
>;

export type QuotationControllerMarkedAsAcceptedMutationError = ErrorType<unknown>;

export const useQuotationControllerMarkedAsAccepted = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>,
		TError,
		{ params: QuotationControllerMarkedAsAcceptedParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerMarkedAsAccepted>>,
	TError,
	{ params: QuotationControllerMarkedAsAcceptedParams },
	TContext
> => {
	const mutationOptions = getQuotationControllerMarkedAsAcceptedMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerMarkedAsMailed = (
	params: QuotationControllerMarkedAsMailedParams,
) => {
	return authInstance<QuotationControllerMarkedAsMailed200 | void>({
		url: `/api/quotation/markedAsMailed`,
		method: "POST",
		params,
	});
};

export const getQuotationControllerMarkedAsMailedMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>,
		TError,
		{ params: QuotationControllerMarkedAsMailedParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>,
	TError,
	{ params: QuotationControllerMarkedAsMailedParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>,
		{ params: QuotationControllerMarkedAsMailedParams }
	> = (props) => {
		const { params } = props ?? {};

		return quotationControllerMarkedAsMailed(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerMarkedAsMailedMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>
>;

export type QuotationControllerMarkedAsMailedMutationError = ErrorType<unknown>;

export const useQuotationControllerMarkedAsMailed = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>,
		TError,
		{ params: QuotationControllerMarkedAsMailedParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerMarkedAsMailed>>,
	TError,
	{ params: QuotationControllerMarkedAsMailedParams },
	TContext
> => {
	const mutationOptions = getQuotationControllerMarkedAsMailedMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerConvertToInvoice = (
	params: QuotationControllerConvertToInvoiceParams,
) => {
	return authInstance<QuotationControllerConvertToInvoice200 | void>({
		url: `/api/quotation/convertToInvoice`,
		method: "POST",
		params,
	});
};

export const getQuotationControllerConvertToInvoiceMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>,
		TError,
		{ params: QuotationControllerConvertToInvoiceParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>,
	TError,
	{ params: QuotationControllerConvertToInvoiceParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>,
		{ params: QuotationControllerConvertToInvoiceParams }
	> = (props) => {
		const { params } = props ?? {};

		return quotationControllerConvertToInvoice(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerConvertToInvoiceMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>
>;

export type QuotationControllerConvertToInvoiceMutationError = ErrorType<unknown>;

export const useQuotationControllerConvertToInvoice = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>,
		TError,
		{ params: QuotationControllerConvertToInvoiceParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerConvertToInvoice>>,
	TError,
	{ params: QuotationControllerConvertToInvoiceParams },
	TContext
> => {
	const mutationOptions = getQuotationControllerConvertToInvoiceMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerQuotationPreviewFromBody = (
	createQuotationWithProducts: CreateQuotationWithProducts,
) => {
	return authInstance<string | void>({
		url: `/api/quotation/quotationPreviewFromBody`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createQuotationWithProducts,
	});
};

export const getQuotationControllerQuotationPreviewFromBodyMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>,
		{ data: CreateQuotationWithProducts }
	> = (props) => {
		const { data } = props ?? {};

		return quotationControllerQuotationPreviewFromBody(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerQuotationPreviewFromBodyMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>
>;
export type QuotationControllerQuotationPreviewFromBodyMutationBody = CreateQuotationWithProducts;
export type QuotationControllerQuotationPreviewFromBodyMutationError = ErrorType<unknown>;

export const useQuotationControllerQuotationPreviewFromBody = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerQuotationPreviewFromBody>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const mutationOptions = getQuotationControllerQuotationPreviewFromBodyMutationOptions(options);

	return useMutation(mutationOptions);
};
