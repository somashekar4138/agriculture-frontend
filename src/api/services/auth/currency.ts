/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	QueryFunction,
	QueryKey,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CountryDto,
	CurrenciesDto,
	CurrencyControllerFindStatesByCountryParams,
	StateDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const currencyControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<CurrenciesDto[]>({ url: `/api/currency`, method: "GET", signal });
};

export const getCurrencyControllerFindAllQueryKey = () => {
	return [`/api/currency`] as const;
};

export const getCurrencyControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof currencyControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCurrencyControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof currencyControllerFindAll>>> = ({
		signal,
	}) => currencyControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof currencyControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CurrencyControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof currencyControllerFindAll>>
>;
export type CurrencyControllerFindAllQueryError = ErrorType<unknown>;

export const useCurrencyControllerFindAll = <
	TData = Awaited<ReturnType<typeof currencyControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCurrencyControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const currencyControllerFindCountries = (signal?: AbortSignal) => {
	return authInstance<CountryDto[]>({ url: `/api/currency/countries`, method: "GET", signal });
};

export const getCurrencyControllerFindCountriesQueryKey = () => {
	return [`/api/currency/countries`] as const;
};

export const getCurrencyControllerFindCountriesQueryOptions = <
	TData = Awaited<ReturnType<typeof currencyControllerFindCountries>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindCountries>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCurrencyControllerFindCountriesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof currencyControllerFindCountries>>> = ({
		signal,
	}) => currencyControllerFindCountries(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof currencyControllerFindCountries>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CurrencyControllerFindCountriesQueryResult = NonNullable<
	Awaited<ReturnType<typeof currencyControllerFindCountries>>
>;
export type CurrencyControllerFindCountriesQueryError = ErrorType<unknown>;

export const useCurrencyControllerFindCountries = <
	TData = Awaited<ReturnType<typeof currencyControllerFindCountries>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindCountries>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCurrencyControllerFindCountriesQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const currencyControllerFindStates = (signal?: AbortSignal) => {
	return authInstance<StateDto[]>({ url: `/api/currency/states`, method: "GET", signal });
};

export const getCurrencyControllerFindStatesQueryKey = () => {
	return [`/api/currency/states`] as const;
};

export const getCurrencyControllerFindStatesQueryOptions = <
	TData = Awaited<ReturnType<typeof currencyControllerFindStates>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindStates>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCurrencyControllerFindStatesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof currencyControllerFindStates>>> = ({
		signal,
	}) => currencyControllerFindStates(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof currencyControllerFindStates>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CurrencyControllerFindStatesQueryResult = NonNullable<
	Awaited<ReturnType<typeof currencyControllerFindStates>>
>;
export type CurrencyControllerFindStatesQueryError = ErrorType<unknown>;

export const useCurrencyControllerFindStates = <
	TData = Awaited<ReturnType<typeof currencyControllerFindStates>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof currencyControllerFindStates>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCurrencyControllerFindStatesQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const currencyControllerFindStatesByCountry = (
	params: CurrencyControllerFindStatesByCountryParams,
	signal?: AbortSignal,
) => {
	return authInstance<StateDto[]>({
		url: `/api/currency/statesByCountry`,
		method: "GET",
		params,
		signal,
	});
};

export const getCurrencyControllerFindStatesByCountryQueryKey = (
	params: CurrencyControllerFindStatesByCountryParams,
) => {
	return [`/api/currency/statesByCountry`, ...(params ? [params] : [])] as const;
};

export const getCurrencyControllerFindStatesByCountryQueryOptions = <
	TData = Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>,
	TError = ErrorType<unknown>,
>(
	params: CurrencyControllerFindStatesByCountryParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCurrencyControllerFindStatesByCountryQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>
	> = ({ signal }) => currencyControllerFindStatesByCountry(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CurrencyControllerFindStatesByCountryQueryResult = NonNullable<
	Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>
>;
export type CurrencyControllerFindStatesByCountryQueryError = ErrorType<unknown>;

export const useCurrencyControllerFindStatesByCountry = <
	TData = Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>,
	TError = ErrorType<unknown>,
>(
	params: CurrencyControllerFindStatesByCountryParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof currencyControllerFindStatesByCountry>>,
				TError,
				TData
			>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCurrencyControllerFindStatesByCountryQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};
