/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateProductDto,
	ProductControllerCreate201,
	ProductControllerUpdate200,
	ProductDto,
	ProductWithAllDataDto,
	SuccessResponseDto,
	UpdateProductDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const productControllerCreate = (createProductDto: CreateProductDto) => {
	return authInstance<ProductControllerCreate201>({
		url: `/api/product`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createProductDto,
	});
};

export const getProductControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerCreate>>,
		TError,
		{ data: CreateProductDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof productControllerCreate>>,
	TError,
	{ data: CreateProductDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof productControllerCreate>>,
		{ data: CreateProductDto }
	> = (props) => {
		const { data } = props ?? {};

		return productControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProductControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof productControllerCreate>>
>;
export type ProductControllerCreateMutationBody = CreateProductDto;
export type ProductControllerCreateMutationError = ErrorType<unknown>;

export const useProductControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerCreate>>,
		TError,
		{ data: CreateProductDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof productControllerCreate>>,
	TError,
	{ data: CreateProductDto },
	TContext
> => {
	const mutationOptions = getProductControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const productControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<ProductWithAllDataDto[]>({ url: `/api/product`, method: "GET", signal });
};

export const getProductControllerFindAllQueryKey = () => {
	return [`/api/product`] as const;
};

export const getProductControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof productControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof productControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getProductControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof productControllerFindAll>>> = ({
		signal,
	}) => productControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof productControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ProductControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof productControllerFindAll>>
>;
export type ProductControllerFindAllQueryError = ErrorType<unknown>;

export const useProductControllerFindAll = <
	TData = Awaited<ReturnType<typeof productControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof productControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getProductControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const productControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<ProductDto>({ url: `/api/product/${id}`, method: "GET", signal });
};

export const getProductControllerFindOneQueryKey = (id: string) => {
	return [`/api/product/${id}`] as const;
};

export const getProductControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof productControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof productControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getProductControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof productControllerFindOne>>> = ({
		signal,
	}) => productControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof productControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ProductControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof productControllerFindOne>>
>;
export type ProductControllerFindOneQueryError = ErrorType<unknown>;

export const useProductControllerFindOne = <
	TData = Awaited<ReturnType<typeof productControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof productControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getProductControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const productControllerUpdate = (id: string, updateProductDto: UpdateProductDto) => {
	return authInstance<ProductControllerUpdate200>({
		url: `/api/product/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateProductDto,
	});
};

export const getProductControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerUpdate>>,
		TError,
		{ id: string; data: UpdateProductDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof productControllerUpdate>>,
	TError,
	{ id: string; data: UpdateProductDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof productControllerUpdate>>,
		{ id: string; data: UpdateProductDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return productControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProductControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof productControllerUpdate>>
>;
export type ProductControllerUpdateMutationBody = UpdateProductDto;
export type ProductControllerUpdateMutationError = ErrorType<unknown>;

export const useProductControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerUpdate>>,
		TError,
		{ id: string; data: UpdateProductDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof productControllerUpdate>>,
	TError,
	{ id: string; data: UpdateProductDto },
	TContext
> => {
	const mutationOptions = getProductControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const productControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/product/${id}`, method: "DELETE" });
};

export const getProductControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof productControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof productControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return productControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProductControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof productControllerRemove>>
>;

export type ProductControllerRemoveMutationError = ErrorType<unknown>;

export const useProductControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof productControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof productControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getProductControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
