/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateExpensesDto,
	Expenses,
	ExpensesControllerCreate200,
	ExpensesControllerUpdate200,
	ExpensesDto,
	SuccessResponseDto,
	UpdateExpensesDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const expensesControllerCreate = (createExpensesDto: CreateExpensesDto) => {
	return authInstance<ExpensesControllerCreate200 | void>({
		url: `/api/expenses`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createExpensesDto,
	});
};

export const getExpensesControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerCreate>>,
		TError,
		{ data: CreateExpensesDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof expensesControllerCreate>>,
	TError,
	{ data: CreateExpensesDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof expensesControllerCreate>>,
		{ data: CreateExpensesDto }
	> = (props) => {
		const { data } = props ?? {};

		return expensesControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ExpensesControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof expensesControllerCreate>>
>;
export type ExpensesControllerCreateMutationBody = CreateExpensesDto;
export type ExpensesControllerCreateMutationError = ErrorType<unknown>;

export const useExpensesControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerCreate>>,
		TError,
		{ data: CreateExpensesDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof expensesControllerCreate>>,
	TError,
	{ data: CreateExpensesDto },
	TContext
> => {
	const mutationOptions = getExpensesControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const expensesControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<Expenses[]>({ url: `/api/expenses`, method: "GET", signal });
};

export const getExpensesControllerFindAllQueryKey = () => {
	return [`/api/expenses`] as const;
};

export const getExpensesControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof expensesControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof expensesControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getExpensesControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof expensesControllerFindAll>>> = ({
		signal,
	}) => expensesControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof expensesControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ExpensesControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof expensesControllerFindAll>>
>;
export type ExpensesControllerFindAllQueryError = ErrorType<unknown>;

export const useExpensesControllerFindAll = <
	TData = Awaited<ReturnType<typeof expensesControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof expensesControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getExpensesControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const expensesControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<ExpensesDto>({ url: `/api/expenses/${id}`, method: "GET", signal });
};

export const getExpensesControllerFindOneQueryKey = (id: string) => {
	return [`/api/expenses/${id}`] as const;
};

export const getExpensesControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof expensesControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof expensesControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getExpensesControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof expensesControllerFindOne>>> = ({
		signal,
	}) => expensesControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof expensesControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ExpensesControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof expensesControllerFindOne>>
>;
export type ExpensesControllerFindOneQueryError = ErrorType<unknown>;

export const useExpensesControllerFindOne = <
	TData = Awaited<ReturnType<typeof expensesControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof expensesControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getExpensesControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const expensesControllerUpdate = (id: string, updateExpensesDto: UpdateExpensesDto) => {
	return authInstance<ExpensesControllerUpdate200>({
		url: `/api/expenses/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateExpensesDto,
	});
};

export const getExpensesControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerUpdate>>,
		TError,
		{ id: string; data: UpdateExpensesDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof expensesControllerUpdate>>,
	TError,
	{ id: string; data: UpdateExpensesDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof expensesControllerUpdate>>,
		{ id: string; data: UpdateExpensesDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return expensesControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ExpensesControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof expensesControllerUpdate>>
>;
export type ExpensesControllerUpdateMutationBody = UpdateExpensesDto;
export type ExpensesControllerUpdateMutationError = ErrorType<unknown>;

export const useExpensesControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerUpdate>>,
		TError,
		{ id: string; data: UpdateExpensesDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof expensesControllerUpdate>>,
	TError,
	{ id: string; data: UpdateExpensesDto },
	TContext
> => {
	const mutationOptions = getExpensesControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const expensesControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/expenses/${id}`, method: "DELETE" });
};

export const getExpensesControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof expensesControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof expensesControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return expensesControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type ExpensesControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof expensesControllerRemove>>
>;

export type ExpensesControllerRemoveMutationError = ErrorType<unknown>;

export const useExpensesControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof expensesControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof expensesControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getExpensesControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
