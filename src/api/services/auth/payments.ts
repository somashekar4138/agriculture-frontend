/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreatePaymentsDto,
	Payments,
	PaymentsControllerCreate200,
	PaymentsControllerRazorpayPaymentParams,
	PaymentsControllerStripePaymentForPlansParams,
	PaymentsControllerStripePaymentParams,
	PaymentsControllerSuccessParams,
	PaymentsControllerSuccessPlansParams,
	PaymentsControllerSuccessRazorpayParams,
	PaymentsControllerUpdate200,
	RazorpayPaymentDto,
	SuccessResponseDto,
	UpdatePaymentsDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const paymentsControllerSuccess = (
	params: PaymentsControllerSuccessParams,
	signal?: AbortSignal,
) => {
	return authInstance<void>({ url: `/api/payments/success`, method: "GET", params, signal });
};

export const getPaymentsControllerSuccessQueryKey = (params: PaymentsControllerSuccessParams) => {
	return [`/api/payments/success`, ...(params ? [params] : [])] as const;
};

export const getPaymentsControllerSuccessQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccess>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccess>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerSuccessQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerSuccess>>> = ({
		signal,
	}) => paymentsControllerSuccess(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerSuccess>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerSuccessQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerSuccess>>
>;
export type PaymentsControllerSuccessQueryError = ErrorType<unknown>;

export const usePaymentsControllerSuccess = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccess>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccess>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerSuccessQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerSuccessPlans = (
	params: PaymentsControllerSuccessPlansParams,
	signal?: AbortSignal,
) => {
	return authInstance<void>({ url: `/api/payments/successPlans`, method: "GET", params, signal });
};

export const getPaymentsControllerSuccessPlansQueryKey = (
	params: PaymentsControllerSuccessPlansParams,
) => {
	return [`/api/payments/successPlans`, ...(params ? [params] : [])] as const;
};

export const getPaymentsControllerSuccessPlansQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessPlansParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerSuccessPlansQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>> = ({
		signal,
	}) => paymentsControllerSuccessPlans(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerSuccessPlansQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>
>;
export type PaymentsControllerSuccessPlansQueryError = ErrorType<unknown>;

export const usePaymentsControllerSuccessPlans = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessPlansParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccessPlans>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerSuccessPlansQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerCancelPlans = (signal?: AbortSignal) => {
	return authInstance<void>({ url: `/api/payments/cancelPlans`, method: "GET", signal });
};

export const getPaymentsControllerCancelPlansQueryKey = () => {
	return [`/api/payments/cancelPlans`] as const;
};

export const getPaymentsControllerCancelPlansQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerCancelPlans>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerCancelPlans>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerCancelPlansQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerCancelPlans>>> = ({
		signal,
	}) => paymentsControllerCancelPlans(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerCancelPlans>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerCancelPlansQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerCancelPlans>>
>;
export type PaymentsControllerCancelPlansQueryError = ErrorType<unknown>;

export const usePaymentsControllerCancelPlans = <
	TData = Awaited<ReturnType<typeof paymentsControllerCancelPlans>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerCancelPlans>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerCancelPlansQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerSuccessRazorpay = (
	params: PaymentsControllerSuccessRazorpayParams,
	signal?: AbortSignal,
) => {
	return authInstance<boolean>({
		url: `/api/payments/successRazorpay`,
		method: "GET",
		params,
		signal,
	});
};

export const getPaymentsControllerSuccessRazorpayQueryKey = (
	params: PaymentsControllerSuccessRazorpayParams,
) => {
	return [`/api/payments/successRazorpay`, ...(params ? [params] : [])] as const;
};

export const getPaymentsControllerSuccessRazorpayQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessRazorpayParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerSuccessRazorpayQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>> = ({
		signal,
	}) => paymentsControllerSuccessRazorpay(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerSuccessRazorpayQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>
>;
export type PaymentsControllerSuccessRazorpayQueryError = ErrorType<unknown>;

export const usePaymentsControllerSuccessRazorpay = <
	TData = Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>,
	TError = ErrorType<unknown>,
>(
	params: PaymentsControllerSuccessRazorpayParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerSuccessRazorpay>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerSuccessRazorpayQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerCreate = (createPaymentsDto: CreatePaymentsDto) => {
	return authInstance<PaymentsControllerCreate200 | void>({
		url: `/api/payments`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createPaymentsDto,
	});
};

export const getPaymentsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerCreate>>,
		TError,
		{ data: CreatePaymentsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerCreate>>,
	TError,
	{ data: CreatePaymentsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerCreate>>,
		{ data: CreatePaymentsDto }
	> = (props) => {
		const { data } = props ?? {};

		return paymentsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerCreate>>
>;
export type PaymentsControllerCreateMutationBody = CreatePaymentsDto;
export type PaymentsControllerCreateMutationError = ErrorType<unknown>;

export const usePaymentsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerCreate>>,
		TError,
		{ data: CreatePaymentsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerCreate>>,
	TError,
	{ data: CreatePaymentsDto },
	TContext
> => {
	const mutationOptions = getPaymentsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<Payments[]>({ url: `/api/payments`, method: "GET", signal });
};

export const getPaymentsControllerFindAllQueryKey = () => {
	return [`/api/payments`] as const;
};

export const getPaymentsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerFindAll>>> = ({
		signal,
	}) => paymentsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerFindAll>>
>;
export type PaymentsControllerFindAllQueryError = ErrorType<unknown>;

export const usePaymentsControllerFindAll = <
	TData = Awaited<ReturnType<typeof paymentsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<Payments>({ url: `/api/payments/${id}`, method: "GET", signal });
};

export const getPaymentsControllerFindOneQueryKey = (id: string) => {
	return [`/api/payments/${id}`] as const;
};

export const getPaymentsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPaymentsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerFindOne>>> = ({
		signal,
	}) => paymentsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof paymentsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PaymentsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerFindOne>>
>;
export type PaymentsControllerFindOneQueryError = ErrorType<unknown>;

export const usePaymentsControllerFindOne = <
	TData = Awaited<ReturnType<typeof paymentsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPaymentsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const paymentsControllerUpdate = (id: string, updatePaymentsDto: UpdatePaymentsDto) => {
	return authInstance<PaymentsControllerUpdate200>({
		url: `/api/payments/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updatePaymentsDto,
	});
};

export const getPaymentsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePaymentsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePaymentsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerUpdate>>,
		{ id: string; data: UpdatePaymentsDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return paymentsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerUpdate>>
>;
export type PaymentsControllerUpdateMutationBody = UpdatePaymentsDto;
export type PaymentsControllerUpdateMutationError = ErrorType<unknown>;

export const usePaymentsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePaymentsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePaymentsDto },
	TContext
> => {
	const mutationOptions = getPaymentsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentsControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/payments/${id}`, method: "DELETE" });
};

export const getPaymentsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return paymentsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerRemove>>
>;

export type PaymentsControllerRemoveMutationError = ErrorType<unknown>;

export const usePaymentsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getPaymentsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentsControllerStripePayment = (params: PaymentsControllerStripePaymentParams) => {
	return authInstance<string>({ url: `/api/payments/stripePayment`, method: "POST", params });
};

export const getPaymentsControllerStripePaymentMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerStripePayment>>,
		TError,
		{ params: PaymentsControllerStripePaymentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerStripePayment>>,
	TError,
	{ params: PaymentsControllerStripePaymentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerStripePayment>>,
		{ params: PaymentsControllerStripePaymentParams }
	> = (props) => {
		const { params } = props ?? {};

		return paymentsControllerStripePayment(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerStripePaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerStripePayment>>
>;

export type PaymentsControllerStripePaymentMutationError = ErrorType<unknown>;

export const usePaymentsControllerStripePayment = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerStripePayment>>,
		TError,
		{ params: PaymentsControllerStripePaymentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerStripePayment>>,
	TError,
	{ params: PaymentsControllerStripePaymentParams },
	TContext
> => {
	const mutationOptions = getPaymentsControllerStripePaymentMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentsControllerStripePaymentForPlans = (
	params: PaymentsControllerStripePaymentForPlansParams,
) => {
	return authInstance<string>({
		url: `/api/payments/stripePaymentForPlans`,
		method: "POST",
		params,
	});
};

export const getPaymentsControllerStripePaymentForPlansMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>,
		TError,
		{ params: PaymentsControllerStripePaymentForPlansParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>,
	TError,
	{ params: PaymentsControllerStripePaymentForPlansParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>,
		{ params: PaymentsControllerStripePaymentForPlansParams }
	> = (props) => {
		const { params } = props ?? {};

		return paymentsControllerStripePaymentForPlans(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerStripePaymentForPlansMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>
>;

export type PaymentsControllerStripePaymentForPlansMutationError = ErrorType<unknown>;

export const usePaymentsControllerStripePaymentForPlans = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>,
		TError,
		{ params: PaymentsControllerStripePaymentForPlansParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerStripePaymentForPlans>>,
	TError,
	{ params: PaymentsControllerStripePaymentForPlansParams },
	TContext
> => {
	const mutationOptions = getPaymentsControllerStripePaymentForPlansMutationOptions(options);

	return useMutation(mutationOptions);
};
export const paymentsControllerRazorpayPayment = (
	params: PaymentsControllerRazorpayPaymentParams,
) => {
	return authInstance<RazorpayPaymentDto>({
		url: `/api/payments/razorpayPayment`,
		method: "POST",
		params,
	});
};

export const getPaymentsControllerRazorpayPaymentMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>,
		TError,
		{ params: PaymentsControllerRazorpayPaymentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>,
	TError,
	{ params: PaymentsControllerRazorpayPaymentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>,
		{ params: PaymentsControllerRazorpayPaymentParams }
	> = (props) => {
		const { params } = props ?? {};

		return paymentsControllerRazorpayPayment(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaymentsControllerRazorpayPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>
>;

export type PaymentsControllerRazorpayPaymentMutationError = ErrorType<unknown>;

export const usePaymentsControllerRazorpayPayment = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>,
		TError,
		{ params: PaymentsControllerRazorpayPaymentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof paymentsControllerRazorpayPayment>>,
	TError,
	{ params: PaymentsControllerRazorpayPaymentParams },
	TContext
> => {
	const mutationOptions = getPaymentsControllerRazorpayPaymentMutationOptions(options);

	return useMutation(mutationOptions);
};
