/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateGateWayDetailsDto,
	GateWayDetailsDto,
	GatewaydetailsControllerCreate200,
	GatewaydetailsControllerFindEnabledAllParams,
	GatewaydetailsControllerUpdate200,
	SuccessResponseDto,
	UpdateGateWayDetailsDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const gatewaydetailsControllerCreate = (
	createGateWayDetailsDto: CreateGateWayDetailsDto,
) => {
	return authInstance<GatewaydetailsControllerCreate200 | void>({
		url: `/api/gatewaydetails`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createGateWayDetailsDto,
	});
};

export const getGatewaydetailsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>,
		TError,
		{ data: CreateGateWayDetailsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>,
	TError,
	{ data: CreateGateWayDetailsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>,
		{ data: CreateGateWayDetailsDto }
	> = (props) => {
		const { data } = props ?? {};

		return gatewaydetailsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type GatewaydetailsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>
>;
export type GatewaydetailsControllerCreateMutationBody = CreateGateWayDetailsDto;
export type GatewaydetailsControllerCreateMutationError = ErrorType<unknown>;

export const useGatewaydetailsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>,
		TError,
		{ data: CreateGateWayDetailsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof gatewaydetailsControllerCreate>>,
	TError,
	{ data: CreateGateWayDetailsDto },
	TContext
> => {
	const mutationOptions = getGatewaydetailsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const gatewaydetailsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<GateWayDetailsDto[]>({ url: `/api/gatewaydetails`, method: "GET", signal });
};

export const getGatewaydetailsControllerFindAllQueryKey = () => {
	return [`/api/gatewaydetails`] as const;
};

export const getGatewaydetailsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGatewaydetailsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>> = ({
		signal,
	}) => gatewaydetailsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GatewaydetailsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>
>;
export type GatewaydetailsControllerFindAllQueryError = ErrorType<unknown>;

export const useGatewaydetailsControllerFindAll = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof gatewaydetailsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGatewaydetailsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const gatewaydetailsControllerFindEnabledAll = (
	params: GatewaydetailsControllerFindEnabledAllParams,
	signal?: AbortSignal,
) => {
	return authInstance<GateWayDetailsDto[]>({
		url: `/api/gatewaydetails/enabled`,
		method: "GET",
		params,
		signal,
	});
};

export const getGatewaydetailsControllerFindEnabledAllQueryKey = (
	params: GatewaydetailsControllerFindEnabledAllParams,
) => {
	return [`/api/gatewaydetails/enabled`, ...(params ? [params] : [])] as const;
};

export const getGatewaydetailsControllerFindEnabledAllQueryOptions = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>,
	TError = ErrorType<unknown>,
>(
	params: GatewaydetailsControllerFindEnabledAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGatewaydetailsControllerFindEnabledAllQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>
	> = ({ signal }) => gatewaydetailsControllerFindEnabledAll(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GatewaydetailsControllerFindEnabledAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>
>;
export type GatewaydetailsControllerFindEnabledAllQueryError = ErrorType<unknown>;

export const useGatewaydetailsControllerFindEnabledAll = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>,
	TError = ErrorType<unknown>,
>(
	params: GatewaydetailsControllerFindEnabledAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof gatewaydetailsControllerFindEnabledAll>>,
				TError,
				TData
			>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGatewaydetailsControllerFindEnabledAllQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const gatewaydetailsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<GateWayDetailsDto>({
		url: `/api/gatewaydetails/${id}`,
		method: "GET",
		signal,
	});
};

export const getGatewaydetailsControllerFindOneQueryKey = (id: string) => {
	return [`/api/gatewaydetails/${id}`] as const;
};

export const getGatewaydetailsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGatewaydetailsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>> = ({
		signal,
	}) => gatewaydetailsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GatewaydetailsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>
>;
export type GatewaydetailsControllerFindOneQueryError = ErrorType<unknown>;

export const useGatewaydetailsControllerFindOne = <
	TData = Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof gatewaydetailsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGatewaydetailsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const gatewaydetailsControllerUpdate = (
	id: string,
	updateGateWayDetailsDto: UpdateGateWayDetailsDto,
) => {
	return authInstance<GatewaydetailsControllerUpdate200>({
		url: `/api/gatewaydetails/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateGateWayDetailsDto,
	});
};

export const getGatewaydetailsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateGateWayDetailsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateGateWayDetailsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>,
		{ id: string; data: UpdateGateWayDetailsDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return gatewaydetailsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type GatewaydetailsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>
>;
export type GatewaydetailsControllerUpdateMutationBody = UpdateGateWayDetailsDto;
export type GatewaydetailsControllerUpdateMutationError = ErrorType<unknown>;

export const useGatewaydetailsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateGateWayDetailsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof gatewaydetailsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateGateWayDetailsDto },
	TContext
> => {
	const mutationOptions = getGatewaydetailsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const gatewaydetailsControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/gatewaydetails/${id}`, method: "DELETE" });
};

export const getGatewaydetailsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return gatewaydetailsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type GatewaydetailsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>
>;

export type GatewaydetailsControllerRemoveMutationError = ErrorType<unknown>;

export const useGatewaydetailsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof gatewaydetailsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getGatewaydetailsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
