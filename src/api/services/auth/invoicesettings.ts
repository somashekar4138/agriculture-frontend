/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateInvoiceSettingsDto,
	InvoiceSettingsDto,
	InvoicesettingsControllerCreate201,
	InvoicesettingsControllerUpdate200,
	SuccessResponseDto,
	UpdateInvoiceSettingsDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const invoicesettingsControllerCreate = (
	createInvoiceSettingsDto: CreateInvoiceSettingsDto,
) => {
	return authInstance<InvoicesettingsControllerCreate201>({
		url: `/api/invoicesettings`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createInvoiceSettingsDto,
	});
};

export const getInvoicesettingsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerCreate>>,
		TError,
		{ data: CreateInvoiceSettingsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicesettingsControllerCreate>>,
	TError,
	{ data: CreateInvoiceSettingsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicesettingsControllerCreate>>,
		{ data: CreateInvoiceSettingsDto }
	> = (props) => {
		const { data } = props ?? {};

		return invoicesettingsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicesettingsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerCreate>>
>;
export type InvoicesettingsControllerCreateMutationBody = CreateInvoiceSettingsDto;
export type InvoicesettingsControllerCreateMutationError = ErrorType<unknown>;

export const useInvoicesettingsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerCreate>>,
		TError,
		{ data: CreateInvoiceSettingsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicesettingsControllerCreate>>,
	TError,
	{ data: CreateInvoiceSettingsDto },
	TContext
> => {
	const mutationOptions = getInvoicesettingsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const invoicesettingsControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<InvoiceSettingsDto[]>({ url: `/api/invoicesettings`, method: "GET", signal });
};

export const getInvoicesettingsControllerFindAllQueryKey = () => {
	return [`/api/invoicesettings`] as const;
};

export const getInvoicesettingsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInvoicesettingsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>> = ({
		signal,
	}) => invoicesettingsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InvoicesettingsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>
>;
export type InvoicesettingsControllerFindAllQueryError = ErrorType<unknown>;

export const useInvoicesettingsControllerFindAll = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInvoicesettingsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const invoicesettingsControllerFindFirst = (signal?: AbortSignal) => {
	return authInstance<InvoiceSettingsDto>({
		url: `/api/invoicesettings/first`,
		method: "GET",
		signal,
	});
};

export const getInvoicesettingsControllerFindFirstQueryKey = () => {
	return [`/api/invoicesettings/first`] as const;
};

export const getInvoicesettingsControllerFindFirstQueryOptions = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInvoicesettingsControllerFindFirstQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>> = ({
		signal,
	}) => invoicesettingsControllerFindFirst(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InvoicesettingsControllerFindFirstQueryResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>
>;
export type InvoicesettingsControllerFindFirstQueryError = ErrorType<unknown>;

export const useInvoicesettingsControllerFindFirst = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindFirst>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInvoicesettingsControllerFindFirstQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const invoicesettingsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<InvoiceSettingsDto>({
		url: `/api/invoicesettings/${id}`,
		method: "GET",
		signal,
	});
};

export const getInvoicesettingsControllerFindOneQueryKey = (id: string) => {
	return [`/api/invoicesettings/${id}`] as const;
};

export const getInvoicesettingsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInvoicesettingsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>> = ({
		signal,
	}) => invoicesettingsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InvoicesettingsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>
>;
export type InvoicesettingsControllerFindOneQueryError = ErrorType<unknown>;

export const useInvoicesettingsControllerFindOne = <
	TData = Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof invoicesettingsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInvoicesettingsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const invoicesettingsControllerUpdate = (
	id: string,
	updateInvoiceSettingsDto: UpdateInvoiceSettingsDto,
) => {
	return authInstance<InvoicesettingsControllerUpdate200>({
		url: `/api/invoicesettings/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateInvoiceSettingsDto,
	});
};

export const getInvoicesettingsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInvoiceSettingsDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateInvoiceSettingsDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>,
		{ id: string; data: UpdateInvoiceSettingsDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return invoicesettingsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicesettingsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>
>;
export type InvoicesettingsControllerUpdateMutationBody = UpdateInvoiceSettingsDto;
export type InvoicesettingsControllerUpdateMutationError = ErrorType<unknown>;

export const useInvoicesettingsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInvoiceSettingsDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicesettingsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateInvoiceSettingsDto },
	TContext
> => {
	const mutationOptions = getInvoicesettingsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const invoicesettingsControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/invoicesettings/${id}`, method: "DELETE" });
};

export const getInvoicesettingsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof invoicesettingsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof invoicesettingsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return invoicesettingsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type InvoicesettingsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof invoicesettingsControllerRemove>>
>;

export type InvoicesettingsControllerRemoveMutationError = ErrorType<unknown>;

export const useInvoicesettingsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof invoicesettingsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof invoicesettingsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getInvoicesettingsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
