/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Agridulture API
 * Enhance your business with Agriculture API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import type { RegisterUserDto } from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const appControllerRegisterUser = (registerUserDto: RegisterUserDto) => {
	return authInstance<void>({
		url: `/api/register`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: registerUserDto,
	});
};

export const getAppControllerRegisterUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof appControllerRegisterUser>>,
		TError,
		{ data: RegisterUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof appControllerRegisterUser>>,
	TError,
	{ data: RegisterUserDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof appControllerRegisterUser>>,
		{ data: RegisterUserDto }
	> = (props) => {
		const { data } = props ?? {};

		return appControllerRegisterUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AppControllerRegisterUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof appControllerRegisterUser>>
>;
export type AppControllerRegisterUserMutationBody = RegisterUserDto;
export type AppControllerRegisterUserMutationError = ErrorType<unknown>;

export const useAppControllerRegisterUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof appControllerRegisterUser>>,
		TError,
		{ data: RegisterUserDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof appControllerRegisterUser>>,
	TError,
	{ data: RegisterUserDto },
	TContext
> => {
	const mutationOptions = getAppControllerRegisterUserMutationOptions(options);

	return useMutation(mutationOptions);
};
