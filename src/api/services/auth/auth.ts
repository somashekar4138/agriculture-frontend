/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	QueryFunction,
	QueryKey,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type { AuthControllerGetUserParams, UserDto, UserWithCompanyDto } from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const authControllerStatus = (signal?: AbortSignal) => {
	return authInstance<UserWithCompanyDto>({ url: `/api/auth`, method: "GET", signal });
};

export const getAuthControllerStatusQueryKey = () => {
	return [`/api/auth`] as const;
};

export const getAuthControllerStatusQueryOptions = <
	TData = Awaited<ReturnType<typeof authControllerStatus>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerStatus>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAuthControllerStatusQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerStatus>>> = ({ signal }) =>
		authControllerStatus(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof authControllerStatus>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type AuthControllerStatusQueryResult = NonNullable<
	Awaited<ReturnType<typeof authControllerStatus>>
>;
export type AuthControllerStatusQueryError = ErrorType<unknown>;

export const useAuthControllerStatus = <
	TData = Awaited<ReturnType<typeof authControllerStatus>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerStatus>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getAuthControllerStatusQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const authControllerGetUser = (
	params: AuthControllerGetUserParams,
	signal?: AbortSignal,
) => {
	return authInstance<UserDto>({ url: `/api/auth/user`, method: "GET", params, signal });
};

export const getAuthControllerGetUserQueryKey = (params: AuthControllerGetUserParams) => {
	return [`/api/auth/user`, ...(params ? [params] : [])] as const;
};

export const getAuthControllerGetUserQueryOptions = <
	TData = Awaited<ReturnType<typeof authControllerGetUser>>,
	TError = ErrorType<unknown>,
>(
	params: AuthControllerGetUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authControllerGetUser>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAuthControllerGetUserQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetUser>>> = ({ signal }) =>
		authControllerGetUser(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof authControllerGetUser>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type AuthControllerGetUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof authControllerGetUser>>
>;
export type AuthControllerGetUserQueryError = ErrorType<unknown>;

export const useAuthControllerGetUser = <
	TData = Awaited<ReturnType<typeof authControllerGetUser>>,
	TError = ErrorType<unknown>,
>(
	params: AuthControllerGetUserParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authControllerGetUser>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getAuthControllerGetUserQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};
