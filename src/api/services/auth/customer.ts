/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateCustomerWithAddressDto,
	CustomerControllerCreate201,
	CustomerControllerUpdate200,
	GetCustomerWithAddressDto,
	SuccessResponseDto,
	UpdateCustomerDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const customerControllerCreate = (
	createCustomerWithAddressDto: CreateCustomerWithAddressDto,
) => {
	return authInstance<CustomerControllerCreate201>({
		url: `/api/customer`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createCustomerWithAddressDto,
	});
};

export const getCustomerControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerCreate>>,
		TError,
		{ data: CreateCustomerWithAddressDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof customerControllerCreate>>,
	TError,
	{ data: CreateCustomerWithAddressDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof customerControllerCreate>>,
		{ data: CreateCustomerWithAddressDto }
	> = (props) => {
		const { data } = props ?? {};

		return customerControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CustomerControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerCreate>>
>;
export type CustomerControllerCreateMutationBody = CreateCustomerWithAddressDto;
export type CustomerControllerCreateMutationError = ErrorType<unknown>;

export const useCustomerControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerCreate>>,
		TError,
		{ data: CreateCustomerWithAddressDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof customerControllerCreate>>,
	TError,
	{ data: CreateCustomerWithAddressDto },
	TContext
> => {
	const mutationOptions = getCustomerControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const customerControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<GetCustomerWithAddressDto[]>({ url: `/api/customer`, method: "GET", signal });
};

export const getCustomerControllerFindAllQueryKey = () => {
	return [`/api/customer`] as const;
};

export const getCustomerControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof customerControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof customerControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCustomerControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof customerControllerFindAll>>> = ({
		signal,
	}) => customerControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof customerControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CustomerControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerFindAll>>
>;
export type CustomerControllerFindAllQueryError = ErrorType<unknown>;

export const useCustomerControllerFindAll = <
	TData = Awaited<ReturnType<typeof customerControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof customerControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCustomerControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const customerControllerCustomerCount = (signal?: AbortSignal) => {
	return authInstance<number>({ url: `/api/customer/customerCount`, method: "GET", signal });
};

export const getCustomerControllerCustomerCountQueryKey = () => {
	return [`/api/customer/customerCount`] as const;
};

export const getCustomerControllerCustomerCountQueryOptions = <
	TData = Awaited<ReturnType<typeof customerControllerCustomerCount>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof customerControllerCustomerCount>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCustomerControllerCustomerCountQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof customerControllerCustomerCount>>> = ({
		signal,
	}) => customerControllerCustomerCount(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof customerControllerCustomerCount>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CustomerControllerCustomerCountQueryResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerCustomerCount>>
>;
export type CustomerControllerCustomerCountQueryError = ErrorType<unknown>;

export const useCustomerControllerCustomerCount = <
	TData = Awaited<ReturnType<typeof customerControllerCustomerCount>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof customerControllerCustomerCount>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCustomerControllerCustomerCountQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const customerControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<GetCustomerWithAddressDto>({
		url: `/api/customer/${id}`,
		method: "GET",
		signal,
	});
};

export const getCustomerControllerFindOneQueryKey = (id: string) => {
	return [`/api/customer/${id}`] as const;
};

export const getCustomerControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof customerControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof customerControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCustomerControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof customerControllerFindOne>>> = ({
		signal,
	}) => customerControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof customerControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CustomerControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerFindOne>>
>;
export type CustomerControllerFindOneQueryError = ErrorType<unknown>;

export const useCustomerControllerFindOne = <
	TData = Awaited<ReturnType<typeof customerControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof customerControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCustomerControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const customerControllerUpdate = (id: string, updateCustomerDto: UpdateCustomerDto) => {
	return authInstance<CustomerControllerUpdate200>({
		url: `/api/customer/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateCustomerDto,
	});
};

export const getCustomerControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCustomerDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof customerControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCustomerDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof customerControllerUpdate>>,
		{ id: string; data: UpdateCustomerDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return customerControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CustomerControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerUpdate>>
>;
export type CustomerControllerUpdateMutationBody = UpdateCustomerDto;
export type CustomerControllerUpdateMutationError = ErrorType<unknown>;

export const useCustomerControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCustomerDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof customerControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCustomerDto },
	TContext
> => {
	const mutationOptions = getCustomerControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const customerControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/customer/${id}`, method: "DELETE" });
};

export const getCustomerControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof customerControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof customerControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return customerControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type CustomerControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof customerControllerRemove>>
>;

export type CustomerControllerRemoveMutationError = ErrorType<unknown>;

export const useCustomerControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof customerControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof customerControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getCustomerControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
