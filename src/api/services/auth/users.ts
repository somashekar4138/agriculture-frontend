/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import type {
	CreateUserCompany,
	ErrorMessageDto,
	ForgotPasswordDto,
	LoginSuccessDto,
	LoginUserDto,
	ResetPasswordTokenDto,
	UpdateCurrencyCompanyDto,
	UpdateUserCompany,
	UserControllerCreateUser201,
	UserControllerUpdateCurrencyCompany201,
	UserControllerUpdateUser201,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const userControllerCreateUser = (createUserCompany: CreateUserCompany) => {
	return authInstance<UserControllerCreateUser201>({
		url: `/api/user/create`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createUserCompany,
	});
};

export const getUserControllerCreateUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerCreateUser>>,
		TError,
		{ data: CreateUserCompany },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerCreateUser>>,
	TError,
	{ data: CreateUserCompany },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerCreateUser>>,
		{ data: CreateUserCompany }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerCreateUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerCreateUser>>
>;
export type UserControllerCreateUserMutationBody = CreateUserCompany;
export type UserControllerCreateUserMutationError = ErrorType<unknown>;

export const useUserControllerCreateUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerCreateUser>>,
		TError,
		{ data: CreateUserCompany },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerCreateUser>>,
	TError,
	{ data: CreateUserCompany },
	TContext
> => {
	const mutationOptions = getUserControllerCreateUserMutationOptions(options);

	return useMutation(mutationOptions);
};
export const userControllerLoginUser = (loginUserDto: LoginUserDto) => {
	return authInstance<LoginSuccessDto>({
		url: `/api/user/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginUserDto,
	});
};

export const getUserControllerLoginUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerLoginUser>>,
		TError,
		{ data: LoginUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerLoginUser>>,
	TError,
	{ data: LoginUserDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerLoginUser>>,
		{ data: LoginUserDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerLoginUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerLoginUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerLoginUser>>
>;
export type UserControllerLoginUserMutationBody = LoginUserDto;
export type UserControllerLoginUserMutationError = ErrorType<unknown>;

export const useUserControllerLoginUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerLoginUser>>,
		TError,
		{ data: LoginUserDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerLoginUser>>,
	TError,
	{ data: LoginUserDto },
	TContext
> => {
	const mutationOptions = getUserControllerLoginUserMutationOptions(options);

	return useMutation(mutationOptions);
};
export const userControllerForgotPassword = (forgotPasswordDto: ForgotPasswordDto) => {
	return authInstance<ErrorMessageDto | void>({
		url: `/api/user/forgot-password`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: forgotPasswordDto,
	});
};

export const getUserControllerForgotPasswordMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerForgotPassword>>,
		TError,
		{ data: ForgotPasswordDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerForgotPassword>>,
	TError,
	{ data: ForgotPasswordDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerForgotPassword>>,
		{ data: ForgotPasswordDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerForgotPassword(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerForgotPasswordMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerForgotPassword>>
>;
export type UserControllerForgotPasswordMutationBody = ForgotPasswordDto;
export type UserControllerForgotPasswordMutationError = ErrorType<unknown>;

export const useUserControllerForgotPassword = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerForgotPassword>>,
		TError,
		{ data: ForgotPasswordDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerForgotPassword>>,
	TError,
	{ data: ForgotPasswordDto },
	TContext
> => {
	const mutationOptions = getUserControllerForgotPasswordMutationOptions(options);

	return useMutation(mutationOptions);
};
export const userControllerResetPassword = (resetPasswordTokenDto: ResetPasswordTokenDto) => {
	return authInstance<ErrorMessageDto | void>({
		url: `/api/user/reset-password`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: resetPasswordTokenDto,
	});
};

export const getUserControllerResetPasswordMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerResetPassword>>,
		TError,
		{ data: ResetPasswordTokenDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerResetPassword>>,
	TError,
	{ data: ResetPasswordTokenDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerResetPassword>>,
		{ data: ResetPasswordTokenDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerResetPassword(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerResetPasswordMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerResetPassword>>
>;
export type UserControllerResetPasswordMutationBody = ResetPasswordTokenDto;
export type UserControllerResetPasswordMutationError = ErrorType<unknown>;

export const useUserControllerResetPassword = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerResetPassword>>,
		TError,
		{ data: ResetPasswordTokenDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerResetPassword>>,
	TError,
	{ data: ResetPasswordTokenDto },
	TContext
> => {
	const mutationOptions = getUserControllerResetPasswordMutationOptions(options);

	return useMutation(mutationOptions);
};
export const userControllerUpdateCurrencyCompany = (
	updateCurrencyCompanyDto: UpdateCurrencyCompanyDto,
) => {
	return authInstance<UserControllerUpdateCurrencyCompany201>({
		url: `/api/user/update-currency-company`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: updateCurrencyCompanyDto,
	});
};

export const getUserControllerUpdateCurrencyCompanyMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>,
		TError,
		{ data: UpdateCurrencyCompanyDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>,
	TError,
	{ data: UpdateCurrencyCompanyDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>,
		{ data: UpdateCurrencyCompanyDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerUpdateCurrencyCompany(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateCurrencyCompanyMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>
>;
export type UserControllerUpdateCurrencyCompanyMutationBody = UpdateCurrencyCompanyDto;
export type UserControllerUpdateCurrencyCompanyMutationError = ErrorType<unknown>;

export const useUserControllerUpdateCurrencyCompany = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>,
		TError,
		{ data: UpdateCurrencyCompanyDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerUpdateCurrencyCompany>>,
	TError,
	{ data: UpdateCurrencyCompanyDto },
	TContext
> => {
	const mutationOptions = getUserControllerUpdateCurrencyCompanyMutationOptions(options);

	return useMutation(mutationOptions);
};
export const userControllerUpdateUser = (id: string, updateUserCompany: UpdateUserCompany) => {
	return authInstance<void | UserControllerUpdateUser201>({
		url: `/api/user/updateUser/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateUserCompany,
	});
};

export const getUserControllerUpdateUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerUpdateUser>>,
		TError,
		{ id: string; data: UpdateUserCompany },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerUpdateUser>>,
	TError,
	{ id: string; data: UpdateUserCompany },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerUpdateUser>>,
		{ id: string; data: UpdateUserCompany }
	> = (props) => {
		const { id, data } = props ?? {};

		return userControllerUpdateUser(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerUpdateUser>>
>;
export type UserControllerUpdateUserMutationBody = UpdateUserCompany;
export type UserControllerUpdateUserMutationError = ErrorType<unknown>;

export const useUserControllerUpdateUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerUpdateUser>>,
		TError,
		{ id: string; data: UpdateUserCompany },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof userControllerUpdateUser>>,
	TError,
	{ id: string; data: UpdateUserCompany },
	TContext
> => {
	const mutationOptions = getUserControllerUpdateUserMutationOptions(options);

	return useMutation(mutationOptions);
};
