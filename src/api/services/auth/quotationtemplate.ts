/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateQuotationTemplateDto,
	QuotationTemplateDto,
	QuotationtemplateControllerCreate201,
	QuotationtemplateControllerUpdate200,
	SuccessResponseDto,
	UpdateQuotationTemplateDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const quotationtemplateControllerCreate = (
	createQuotationTemplateDto: CreateQuotationTemplateDto,
) => {
	return authInstance<QuotationtemplateControllerCreate201>({
		url: `/api/quotationtemplate`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createQuotationTemplateDto,
	});
};

export const getQuotationtemplateControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerCreate>>,
		TError,
		{ data: CreateQuotationTemplateDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationtemplateControllerCreate>>,
	TError,
	{ data: CreateQuotationTemplateDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationtemplateControllerCreate>>,
		{ data: CreateQuotationTemplateDto }
	> = (props) => {
		const { data } = props ?? {};

		return quotationtemplateControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationtemplateControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationtemplateControllerCreate>>
>;
export type QuotationtemplateControllerCreateMutationBody = CreateQuotationTemplateDto;
export type QuotationtemplateControllerCreateMutationError = ErrorType<unknown>;

export const useQuotationtemplateControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerCreate>>,
		TError,
		{ data: CreateQuotationTemplateDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationtemplateControllerCreate>>,
	TError,
	{ data: CreateQuotationTemplateDto },
	TContext
> => {
	const mutationOptions = getQuotationtemplateControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationtemplateControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<QuotationTemplateDto[]>({
		url: `/api/quotationtemplate`,
		method: "GET",
		signal,
	});
};

export const getQuotationtemplateControllerFindAllQueryKey = () => {
	return [`/api/quotationtemplate`] as const;
};

export const getQuotationtemplateControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationtemplateControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>> = ({
		signal,
	}) => quotationtemplateControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationtemplateControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>
>;
export type QuotationtemplateControllerFindAllQueryError = ErrorType<unknown>;

export const useQuotationtemplateControllerFindAll = <
	TData = Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationtemplateControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationtemplateControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationtemplateControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<QuotationTemplateDto>({
		url: `/api/quotationtemplate/${id}`,
		method: "GET",
		signal,
	});
};

export const getQuotationtemplateControllerFindOneQueryKey = (id: string) => {
	return [`/api/quotationtemplate/${id}`] as const;
};

export const getQuotationtemplateControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationtemplateControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>> = ({
		signal,
	}) => quotationtemplateControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationtemplateControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>
>;
export type QuotationtemplateControllerFindOneQueryError = ErrorType<unknown>;

export const useQuotationtemplateControllerFindOne = <
	TData = Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationtemplateControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationtemplateControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationtemplateControllerUpdate = (
	id: string,
	updateQuotationTemplateDto: UpdateQuotationTemplateDto,
) => {
	return authInstance<QuotationtemplateControllerUpdate200>({
		url: `/api/quotationtemplate/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateQuotationTemplateDto,
	});
};

export const getQuotationtemplateControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationTemplateDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationTemplateDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>,
		{ id: string; data: UpdateQuotationTemplateDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return quotationtemplateControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationtemplateControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>
>;
export type QuotationtemplateControllerUpdateMutationBody = UpdateQuotationTemplateDto;
export type QuotationtemplateControllerUpdateMutationError = ErrorType<unknown>;

export const useQuotationtemplateControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationTemplateDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationtemplateControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationTemplateDto },
	TContext
> => {
	const mutationOptions = getQuotationtemplateControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationtemplateControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({
		url: `/api/quotationtemplate/${id}`,
		method: "DELETE",
	});
};

export const getQuotationtemplateControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationtemplateControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationtemplateControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return quotationtemplateControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationtemplateControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationtemplateControllerRemove>>
>;

export type QuotationtemplateControllerRemoveMutationError = ErrorType<unknown>;

export const useQuotationtemplateControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationtemplateControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationtemplateControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getQuotationtemplateControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
