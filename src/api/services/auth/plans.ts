/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreatePlanWithFeaturesDto,
	PlanWithFeaturesDto,
	PlansControllerCreate200,
	PlansControllerUpdate200,
	SuccessResponseDto,
	UpdatePlanWithFeaturesDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const plansControllerCreate = (createPlanWithFeaturesDto: CreatePlanWithFeaturesDto) => {
	return authInstance<PlansControllerCreate200 | void>({
		url: `/api/plans`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createPlanWithFeaturesDto,
	});
};

export const getPlansControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerCreate>>,
		TError,
		{ data: CreatePlanWithFeaturesDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof plansControllerCreate>>,
	TError,
	{ data: CreatePlanWithFeaturesDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof plansControllerCreate>>,
		{ data: CreatePlanWithFeaturesDto }
	> = (props) => {
		const { data } = props ?? {};

		return plansControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PlansControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof plansControllerCreate>>
>;
export type PlansControllerCreateMutationBody = CreatePlanWithFeaturesDto;
export type PlansControllerCreateMutationError = ErrorType<unknown>;

export const usePlansControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerCreate>>,
		TError,
		{ data: CreatePlanWithFeaturesDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof plansControllerCreate>>,
	TError,
	{ data: CreatePlanWithFeaturesDto },
	TContext
> => {
	const mutationOptions = getPlansControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const plansControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<PlanWithFeaturesDto[]>({ url: `/api/plans`, method: "GET", signal });
};

export const getPlansControllerFindAllQueryKey = () => {
	return [`/api/plans`] as const;
};

export const getPlansControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof plansControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof plansControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPlansControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof plansControllerFindAll>>> = ({ signal }) =>
		plansControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof plansControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PlansControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof plansControllerFindAll>>
>;
export type PlansControllerFindAllQueryError = ErrorType<unknown>;

export const usePlansControllerFindAll = <
	TData = Awaited<ReturnType<typeof plansControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof plansControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPlansControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const plansControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<PlanWithFeaturesDto>({ url: `/api/plans/${id}`, method: "GET", signal });
};

export const getPlansControllerFindOneQueryKey = (id: string) => {
	return [`/api/plans/${id}`] as const;
};

export const getPlansControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof plansControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof plansControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPlansControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof plansControllerFindOne>>> = ({ signal }) =>
		plansControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof plansControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type PlansControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof plansControllerFindOne>>
>;
export type PlansControllerFindOneQueryError = ErrorType<unknown>;

export const usePlansControllerFindOne = <
	TData = Awaited<ReturnType<typeof plansControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof plansControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getPlansControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const plansControllerUpdate = (
	id: string,
	updatePlanWithFeaturesDto: UpdatePlanWithFeaturesDto,
) => {
	return authInstance<PlansControllerUpdate200>({
		url: `/api/plans/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updatePlanWithFeaturesDto,
	});
};

export const getPlansControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePlanWithFeaturesDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof plansControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePlanWithFeaturesDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof plansControllerUpdate>>,
		{ id: string; data: UpdatePlanWithFeaturesDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return plansControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PlansControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof plansControllerUpdate>>
>;
export type PlansControllerUpdateMutationBody = UpdatePlanWithFeaturesDto;
export type PlansControllerUpdateMutationError = ErrorType<unknown>;

export const usePlansControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePlanWithFeaturesDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof plansControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePlanWithFeaturesDto },
	TContext
> => {
	const mutationOptions = getPlansControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const plansControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/plans/${id}`, method: "DELETE" });
};

export const getPlansControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof plansControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof plansControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return plansControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type PlansControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof plansControllerRemove>>
>;

export type PlansControllerRemoveMutationError = ErrorType<unknown>;

export const usePlansControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof plansControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof plansControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getPlansControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
