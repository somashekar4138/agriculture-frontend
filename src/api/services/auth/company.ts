/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CompanyControllerUpdate201,
	CompanyDto,
	SuccessResponseDto,
	UpdateCompanyDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const companyControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<CompanyDto>({ url: `/api/company/${id}`, method: "GET", signal });
};

export const getCompanyControllerFindOneQueryKey = (id: string) => {
	return [`/api/company/${id}`] as const;
};

export const getCompanyControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof companyControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCompanyControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof companyControllerFindOne>>> = ({
		signal,
	}) => companyControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof companyControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CompanyControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof companyControllerFindOne>>
>;
export type CompanyControllerFindOneQueryError = ErrorType<unknown>;

export const useCompanyControllerFindOne = <
	TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof companyControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCompanyControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const companyControllerUpdate = (id: string, updateCompanyDto: UpdateCompanyDto) => {
	return authInstance<void | CompanyControllerUpdate201>({
		url: `/api/company/${id}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateCompanyDto,
	});
};

export const getCompanyControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof companyControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCompanyDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof companyControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCompanyDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof companyControllerUpdate>>,
		{ id: string; data: UpdateCompanyDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return companyControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CompanyControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof companyControllerUpdate>>
>;
export type CompanyControllerUpdateMutationBody = UpdateCompanyDto;
export type CompanyControllerUpdateMutationError = ErrorType<unknown>;

export const useCompanyControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof companyControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCompanyDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof companyControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCompanyDto },
	TContext
> => {
	const mutationOptions = getCompanyControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const companyControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/company/${id}`, method: "DELETE" });
};

export const getCompanyControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof companyControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof companyControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof companyControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return companyControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type CompanyControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof companyControllerRemove>>
>;

export type CompanyControllerRemoveMutationError = ErrorType<unknown>;

export const useCompanyControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof companyControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof companyControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getCompanyControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
